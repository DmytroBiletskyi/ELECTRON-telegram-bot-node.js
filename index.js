import TelegramApi from "node-telegram-bot-api";

import {GoogleSpreadsheet} from "google-spreadsheet";
import creds from "./client_secret.json" assert {type: "json"};

import pass from "./passwords.json" assert {type: "json"};
import {keyboardMainMenu, choiceElementButtons, backButton, choiceConvertButtons, choiceVoltageButtons} from "./options.js";


const bot = new TelegramApi(pass.token, {polling: true})


let toggle = 0
let material = 0
let arr = []
let choiceConvert = 0
let U = 0

const parse_mode = {parse_mode: "HTML"}

const start = async () => {

    await bot.setMyCommands([
        {command: "/start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"},
    ])


    bot.on("message", async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        if (text === "/start") {
            toggle = 0
            return bot.sendMessage(chatId, "–í—ñ—Ç–∞—éüëã, –æ–±–µ—Ä—ñ—Ç—å —è–∫—É—Å—å –¥—ñ—é:", keyboardMainMenu)
        }
        if (text === "–ù–∞–∑–∞–¥üëà") {
            toggle = 0
            await bot.sendMessage(chatId, "–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", keyboardMainMenu)
        }
        if (text === "–ü–µ—Ä–µ—Ä—ñ–∑ –∫–∞–±–µ–ª—è ‚û∞" || toggle === 1) {
            if (toggle === 1) {
                let S = (0.785 * Math.pow(parseFloat(text), 2)).toFixed(2)
                await bot.sendMessage(chatId, `–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>${S}</b> –º–º^2`, parse_mode)
            } else {
                await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–º–µ—Ç—Ä(–º–º):", backButton);
                toggle = 1
            }
        }
        if (text === "–í–∏–±—ñ—Ä –∫–∞–±–µ–ª—è –ø–æ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ ‚ö°" || toggle === 2) {
            if (toggle === 2) {
                let data = await accessSpreadsheet();
                for (let row = 0; row < data[0].length; row++) {
                    if (parseFloat(data[0][row]["–ü–µ—Ä–µ—Ç–∏–Ω —Å—Ç—Ä—É–º–æ–ø—Ä–æ–≤—ñ–¥–Ω–æ—ó –∂–∏–ª–∏ –º–º^2"]) === getNumber(arr, parseFloat(text))) {
                        await bot.sendMessage(chatId, `üñã–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ <b>${data[1]}</b> –∫–∞–±–µ–ª—é.\n‚úÖ<b>–î–ª—è 220–í:</b>\nüëâ–°—Ç—Ä—É–º - ${data[0][row]['–ù–∞–ø—Ä—É–≥–∞ 220–í']} A;\nüëâ–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å - ${data[0][row]._rawData[2]} –∫–í—Ç.\n‚úÖ<b>–î–ª—è 380–í:</b>\nüëâ–°—Ç—Ä—É–º - ${data[0][row]['–ù–∞–ø—Ä—É–≥–∞ 380–í']} A;\nüëâ–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å - ${data[0][row]._rawData[4]} –∫–í—Ç.`, parse_mode);
                        arr = [];
                        break;
                    }
                }
            } else {
                await bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª –∫–∞–±–µ–ª—é:", choiceElementButtons);
            }
        }
        if (text === "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ" || toggle === 3) {
            if (toggle === 3) {
                if (choiceConvert === 1) {
                    const A = ((parseFloat(text) * 1000) / U).toFixed(3)
                    await bot.sendMessage(chatId, `üü¢–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥—É: <b>${A}</b> A`, parse_mode)
                }
                else if (choiceConvert === 2) {
                    const W = ((parseFloat(text) * U) / 1000).toFixed(3)
                    await bot.sendMessage(chatId, `üü¢–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥—É: <b>${W}</b> –∫–í—Ç`, parse_mode)
                }
            } else {
                await bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥—É:", choiceConvertButtons)
            }
        }
    });
    bot.on("callback_query", function onCallbackQuery(callbackQuery) {
        if (callbackQuery.data === "Cu") {
            toggle = 2
            return bot.sendMessage(callbackQuery.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ—Ä—ñ–∑ –∫–∞–±–µ–ª—é –≤ –º–º^2:", backButton);
        } else if (callbackQuery.data === "Al") {
            toggle = 2
            material = 1
            return bot.sendMessage(callbackQuery.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ—Ä—ñ–∑ –∫–∞–±–µ–ª—é –≤ –º–º^2:", backButton);
        }
        else if (callbackQuery.data === "kW to A") {
            choiceConvert = 1
            return bot.sendMessage(callbackQuery.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—É–≥—É —Å—Ç—Ä—É–º—É(–í):", choiceVoltageButtons);
        }
        else if (callbackQuery.data === "A to kW") {
            choiceConvert = 2
            return bot.sendMessage(callbackQuery.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—É–≥—É —Å—Ç—Ä—É–º—É(–í):", choiceVoltageButtons);
        }
        else if (callbackQuery.data === "230") {
            toggle = 3
            U = parseInt(callbackQuery.data)
            if (choiceConvert === 1) {
                return bot.sendMessage(callbackQuery.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∫–í—Ç:", backButton);
            }
            else if (choiceConvert === 2) {
                return bot.sendMessage(callbackQuery.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è A:", backButton);
            }
        }
        else if (callbackQuery.data === "400") {
            toggle = 3
            U = parseInt(callbackQuery.data)
        }
    });
}

await start()

function addDataToArr(row) {
    arr.push(parseFloat(row["–ü–µ—Ä–µ—Ç–∏–Ω —Å—Ç—Ä—É–º–æ–ø—Ä–æ–≤—ñ–¥–Ω–æ—ó –∂–∏–ª–∏ –º–º^2"]))
}

const getNumber = (arr, searchNum) => {
    return arr.find(it => Math.abs(it - searchNum) === Math.min(...arr.map(it => Math.abs(it - searchNum))));
}

async function accessSpreadsheet() {
    const doc = new GoogleSpreadsheet(pass.sheet_url);
    await doc.useServiceAccountAuth({
        client_email: creds.client_email,
        private_key: creds.private_key,
    });

    await doc.loadInfo(); // loads document properties and worksheets

    const sheet = doc.sheetsByIndex[material];
    const rows = await sheet.getRows({
        offset: 1
    });

    rows.forEach(row => {
        addDataToArr(row);
    })

    return [rows, sheet.title];
}

